/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 *//**
 * EQchains core - EQchains Foundation's EQchains core library
 * @copyright 2018-present EQchains Foundation All rights reserved...
 * Copyright of all works released by EQchains Foundation or jointly released by
 * EQchains Foundation with cooperative partners are owned by EQchains Foundation
 * and entitled to protection available from copyright law by country as well as
 * international conventions.
 * Attribution — You must give appropriate credit, provide a link to the license.
 * Non Commercial — You may not use the material for commercial purposes.
 * No Derivatives — If you remix, transform, or build upon the material, you may
 * not distribute the modified material.
 * For any use of above stated content of copyright beyond the scope of fair use
 * or without prior written permission, EQchains Foundation reserves all rights to
 * take any legal action and pursue any right or remedy available under applicable
 * law.
 * https://www.eqchains.com
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.eqchains.rpc.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Block extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7910722472800315620L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Block\",\"namespace\":\"com.eqzip.eqcoin.rpc.avro\",\"fields\":[{\"name\":\"cookie\",\"type\":{\"type\":\"record\",\"name\":\"Cookie\",\"fields\":[{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}]}},{\"name\":\"block\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Block> ENCODER =
      new BinaryMessageEncoder<Block>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Block> DECODER =
      new BinaryMessageDecoder<Block>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Block> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Block> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Block>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Block to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Block from a ByteBuffer. */
  public static Block fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.eqchains.rpc.avro.Cookie cookie;
  @Deprecated public java.nio.ByteBuffer block;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Block() {}

  /**
   * All-args constructor.
   * @param cookie The new value for cookie
   * @param block The new value for block
   */
  public Block(com.eqchains.rpc.avro.Cookie cookie, java.nio.ByteBuffer block) {
    this.cookie = cookie;
    this.block = block;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cookie;
    case 1: return block;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cookie = (com.eqchains.rpc.avro.Cookie)value$; break;
    case 1: block = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cookie' field.
   * @return The value of the 'cookie' field.
   */
  public com.eqchains.rpc.avro.Cookie getCookie() {
    return cookie;
  }

  /**
   * Sets the value of the 'cookie' field.
   * @param value the value to set.
   */
  public void setCookie(com.eqchains.rpc.avro.Cookie value) {
    this.cookie = value;
  }

  /**
   * Gets the value of the 'block' field.
   * @return The value of the 'block' field.
   */
  public java.nio.ByteBuffer getBlock() {
    return block;
  }

  /**
   * Sets the value of the 'block' field.
   * @param value the value to set.
   */
  public void setBlock(java.nio.ByteBuffer value) {
    this.block = value;
  }

  /**
   * Creates a new Block RecordBuilder.
   * @return A new Block RecordBuilder
   */
  public static com.eqchains.rpc.avro.Block.Builder newBuilder() {
    return new com.eqchains.rpc.avro.Block.Builder();
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Block RecordBuilder
   */
  public static com.eqchains.rpc.avro.Block.Builder newBuilder(com.eqchains.rpc.avro.Block.Builder other) {
    return new com.eqchains.rpc.avro.Block.Builder(other);
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Block instance.
   * @param other The existing instance to copy.
   * @return A new Block RecordBuilder
   */
  public static com.eqchains.rpc.avro.Block.Builder newBuilder(com.eqchains.rpc.avro.Block other) {
    return new com.eqchains.rpc.avro.Block.Builder(other);
  }

  /**
   * RecordBuilder for Block instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Block>
    implements org.apache.avro.data.RecordBuilder<Block> {

    private com.eqchains.rpc.avro.Cookie cookie;
    private com.eqchains.rpc.avro.Cookie.Builder cookieBuilder;
    private java.nio.ByteBuffer block;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.eqchains.rpc.avro.Block.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cookie)) {
        this.cookie = data().deepCopy(fields()[0].schema(), other.cookie);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCookieBuilder()) {
        this.cookieBuilder = com.eqchains.rpc.avro.Cookie.newBuilder(other.getCookieBuilder());
      }
      if (isValidValue(fields()[1], other.block)) {
        this.block = data().deepCopy(fields()[1].schema(), other.block);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Block instance
     * @param other The existing instance to copy.
     */
    private Builder(com.eqchains.rpc.avro.Block other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cookie)) {
        this.cookie = data().deepCopy(fields()[0].schema(), other.cookie);
        fieldSetFlags()[0] = true;
      }
      this.cookieBuilder = null;
      if (isValidValue(fields()[1], other.block)) {
        this.block = data().deepCopy(fields()[1].schema(), other.block);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'cookie' field.
      * @return The value.
      */
    public com.eqchains.rpc.avro.Cookie getCookie() {
      return cookie;
    }

    /**
      * Sets the value of the 'cookie' field.
      * @param value The value of 'cookie'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.Block.Builder setCookie(com.eqchains.rpc.avro.Cookie value) {
      validate(fields()[0], value);
      this.cookieBuilder = null;
      this.cookie = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cookie' field has been set.
      * @return True if the 'cookie' field has been set, false otherwise.
      */
    public boolean hasCookie() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'cookie' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.eqchains.rpc.avro.Cookie.Builder getCookieBuilder() {
      if (cookieBuilder == null) {
        if (hasCookie()) {
          setCookieBuilder(com.eqchains.rpc.avro.Cookie.newBuilder(cookie));
        } else {
          setCookieBuilder(com.eqchains.rpc.avro.Cookie.newBuilder());
        }
      }
      return cookieBuilder;
    }

    /**
     * Sets the Builder instance for the 'cookie' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.eqchains.rpc.avro.Block.Builder setCookieBuilder(com.eqchains.rpc.avro.Cookie.Builder value) {
      clearCookie();
      cookieBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'cookie' field has an active Builder instance
     * @return True if the 'cookie' field has an active Builder instance
     */
    public boolean hasCookieBuilder() {
      return cookieBuilder != null;
    }

    /**
      * Clears the value of the 'cookie' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.Block.Builder clearCookie() {
      cookie = null;
      cookieBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'block' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBlock() {
      return block;
    }

    /**
      * Sets the value of the 'block' field.
      * @param value The value of 'block'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.Block.Builder setBlock(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.block = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'block' field has been set.
      * @return True if the 'block' field has been set, false otherwise.
      */
    public boolean hasBlock() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'block' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.Block.Builder clearBlock() {
      block = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Block build() {
      try {
        Block record = new Block();
        if (cookieBuilder != null) {
          record.cookie = this.cookieBuilder.build();
        } else {
          record.cookie = fieldSetFlags()[0] ? this.cookie : (com.eqchains.rpc.avro.Cookie) defaultValue(fields()[0]);
        }
        record.block = fieldSetFlags()[1] ? this.block : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Block>
    WRITER$ = (org.apache.avro.io.DatumWriter<Block>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Block>
    READER$ = (org.apache.avro.io.DatumReader<Block>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
