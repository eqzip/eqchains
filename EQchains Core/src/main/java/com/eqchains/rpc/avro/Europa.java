/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.eqchains.rpc.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Europa extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4977312457772490799L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Europa\",\"namespace\":\"com.eqchains.rpc.avro\",\"fields\":[{\"name\":\"height\",\"type\":{\"type\":\"record\",\"name\":\"Height\",\"fields\":[{\"name\":\"cookie\",\"type\":{\"type\":\"record\",\"name\":\"Cookie\",\"fields\":[{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}]}},{\"name\":\"height\",\"type\":\"long\"}]}},{\"name\":\"nonce\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Europa> ENCODER =
      new BinaryMessageEncoder<Europa>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Europa> DECODER =
      new BinaryMessageDecoder<Europa>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Europa> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Europa> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Europa>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Europa to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Europa from a ByteBuffer. */
  public static Europa fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.eqchains.rpc.avro.Height height;
  @Deprecated public long nonce;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Europa() {}

  /**
   * All-args constructor.
   * @param height The new value for height
   * @param nonce The new value for nonce
   */
  public Europa(com.eqchains.rpc.avro.Height height, java.lang.Long nonce) {
    this.height = height;
    this.nonce = nonce;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return height;
    case 1: return nonce;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: height = (com.eqchains.rpc.avro.Height)value$; break;
    case 1: nonce = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'height' field.
   * @return The value of the 'height' field.
   */
  public com.eqchains.rpc.avro.Height getHeight() {
    return height;
  }

  /**
   * Sets the value of the 'height' field.
   * @param value the value to set.
   */
  public void setHeight(com.eqchains.rpc.avro.Height value) {
    this.height = value;
  }

  /**
   * Gets the value of the 'nonce' field.
   * @return The value of the 'nonce' field.
   */
  public java.lang.Long getNonce() {
    return nonce;
  }

  /**
   * Sets the value of the 'nonce' field.
   * @param value the value to set.
   */
  public void setNonce(java.lang.Long value) {
    this.nonce = value;
  }

  /**
   * Creates a new Europa RecordBuilder.
   * @return A new Europa RecordBuilder
   */
  public static com.eqchains.rpc.avro.Europa.Builder newBuilder() {
    return new com.eqchains.rpc.avro.Europa.Builder();
  }

  /**
   * Creates a new Europa RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Europa RecordBuilder
   */
  public static com.eqchains.rpc.avro.Europa.Builder newBuilder(com.eqchains.rpc.avro.Europa.Builder other) {
    return new com.eqchains.rpc.avro.Europa.Builder(other);
  }

  /**
   * Creates a new Europa RecordBuilder by copying an existing Europa instance.
   * @param other The existing instance to copy.
   * @return A new Europa RecordBuilder
   */
  public static com.eqchains.rpc.avro.Europa.Builder newBuilder(com.eqchains.rpc.avro.Europa other) {
    return new com.eqchains.rpc.avro.Europa.Builder(other);
  }

  /**
   * RecordBuilder for Europa instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Europa>
    implements org.apache.avro.data.RecordBuilder<Europa> {

    private com.eqchains.rpc.avro.Height height;
    private com.eqchains.rpc.avro.Height.Builder heightBuilder;
    private long nonce;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.eqchains.rpc.avro.Europa.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.height)) {
        this.height = data().deepCopy(fields()[0].schema(), other.height);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeightBuilder()) {
        this.heightBuilder = com.eqchains.rpc.avro.Height.newBuilder(other.getHeightBuilder());
      }
      if (isValidValue(fields()[1], other.nonce)) {
        this.nonce = data().deepCopy(fields()[1].schema(), other.nonce);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Europa instance
     * @param other The existing instance to copy.
     */
    private Builder(com.eqchains.rpc.avro.Europa other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.height)) {
        this.height = data().deepCopy(fields()[0].schema(), other.height);
        fieldSetFlags()[0] = true;
      }
      this.heightBuilder = null;
      if (isValidValue(fields()[1], other.nonce)) {
        this.nonce = data().deepCopy(fields()[1].schema(), other.nonce);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'height' field.
      * @return The value.
      */
    public com.eqchains.rpc.avro.Height getHeight() {
      return height;
    }

    /**
      * Sets the value of the 'height' field.
      * @param value The value of 'height'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.Europa.Builder setHeight(com.eqchains.rpc.avro.Height value) {
      validate(fields()[0], value);
      this.heightBuilder = null;
      this.height = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'height' field has been set.
      * @return True if the 'height' field has been set, false otherwise.
      */
    public boolean hasHeight() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'height' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.eqchains.rpc.avro.Height.Builder getHeightBuilder() {
      if (heightBuilder == null) {
        if (hasHeight()) {
          setHeightBuilder(com.eqchains.rpc.avro.Height.newBuilder(height));
        } else {
          setHeightBuilder(com.eqchains.rpc.avro.Height.newBuilder());
        }
      }
      return heightBuilder;
    }

    /**
     * Sets the Builder instance for the 'height' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.eqchains.rpc.avro.Europa.Builder setHeightBuilder(com.eqchains.rpc.avro.Height.Builder value) {
      clearHeight();
      heightBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'height' field has an active Builder instance
     * @return True if the 'height' field has an active Builder instance
     */
    public boolean hasHeightBuilder() {
      return heightBuilder != null;
    }

    /**
      * Clears the value of the 'height' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.Europa.Builder clearHeight() {
      height = null;
      heightBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonce' field.
      * @return The value.
      */
    public java.lang.Long getNonce() {
      return nonce;
    }

    /**
      * Sets the value of the 'nonce' field.
      * @param value The value of 'nonce'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.Europa.Builder setNonce(long value) {
      validate(fields()[1], value);
      this.nonce = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nonce' field has been set.
      * @return True if the 'nonce' field has been set, false otherwise.
      */
    public boolean hasNonce() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nonce' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.Europa.Builder clearNonce() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Europa build() {
      try {
        Europa record = new Europa();
        if (heightBuilder != null) {
          record.height = this.heightBuilder.build();
        } else {
          record.height = fieldSetFlags()[0] ? this.height : (com.eqchains.rpc.avro.Height) defaultValue(fields()[0]);
        }
        record.nonce = fieldSetFlags()[1] ? this.nonce : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Europa>
    WRITER$ = (org.apache.avro.io.DatumWriter<Europa>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Europa>
    READER$ = (org.apache.avro.io.DatumReader<Europa>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
