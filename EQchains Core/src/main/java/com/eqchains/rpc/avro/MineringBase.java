/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.eqchains.rpc.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MineringBase extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6711942071035087738L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MineringBase\",\"namespace\":\"com.eqchains.rpc.avro\",\"fields\":[{\"name\":\"cookie\",\"type\":{\"type\":\"record\",\"name\":\"Cookie\",\"fields\":[{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}]}},{\"name\":\"baseIp\",\"type\":\"string\"},{\"name\":\"baseHeight\",\"type\":\"long\"},{\"name\":\"baseHash\",\"type\":{\"type\":\"fixed\",\"name\":\"BaseHash\",\"size\":16}},{\"name\":\"currentTimestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MineringBase> ENCODER =
      new BinaryMessageEncoder<MineringBase>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MineringBase> DECODER =
      new BinaryMessageDecoder<MineringBase>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MineringBase> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MineringBase> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MineringBase>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MineringBase to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MineringBase from a ByteBuffer. */
  public static MineringBase fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.eqchains.rpc.avro.Cookie cookie;
  @Deprecated public java.lang.CharSequence baseIp;
  @Deprecated public long baseHeight;
  @Deprecated public com.eqchains.rpc.avro.BaseHash baseHash;
  @Deprecated public long currentTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MineringBase() {}

  /**
   * All-args constructor.
   * @param cookie The new value for cookie
   * @param baseIp The new value for baseIp
   * @param baseHeight The new value for baseHeight
   * @param baseHash The new value for baseHash
   * @param currentTimestamp The new value for currentTimestamp
   */
  public MineringBase(com.eqchains.rpc.avro.Cookie cookie, java.lang.CharSequence baseIp, java.lang.Long baseHeight, com.eqchains.rpc.avro.BaseHash baseHash, java.lang.Long currentTimestamp) {
    this.cookie = cookie;
    this.baseIp = baseIp;
    this.baseHeight = baseHeight;
    this.baseHash = baseHash;
    this.currentTimestamp = currentTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cookie;
    case 1: return baseIp;
    case 2: return baseHeight;
    case 3: return baseHash;
    case 4: return currentTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cookie = (com.eqchains.rpc.avro.Cookie)value$; break;
    case 1: baseIp = (java.lang.CharSequence)value$; break;
    case 2: baseHeight = (java.lang.Long)value$; break;
    case 3: baseHash = (com.eqchains.rpc.avro.BaseHash)value$; break;
    case 4: currentTimestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cookie' field.
   * @return The value of the 'cookie' field.
   */
  public com.eqchains.rpc.avro.Cookie getCookie() {
    return cookie;
  }

  /**
   * Sets the value of the 'cookie' field.
   * @param value the value to set.
   */
  public void setCookie(com.eqchains.rpc.avro.Cookie value) {
    this.cookie = value;
  }

  /**
   * Gets the value of the 'baseIp' field.
   * @return The value of the 'baseIp' field.
   */
  public java.lang.CharSequence getBaseIp() {
    return baseIp;
  }

  /**
   * Sets the value of the 'baseIp' field.
   * @param value the value to set.
   */
  public void setBaseIp(java.lang.CharSequence value) {
    this.baseIp = value;
  }

  /**
   * Gets the value of the 'baseHeight' field.
   * @return The value of the 'baseHeight' field.
   */
  public java.lang.Long getBaseHeight() {
    return baseHeight;
  }

  /**
   * Sets the value of the 'baseHeight' field.
   * @param value the value to set.
   */
  public void setBaseHeight(java.lang.Long value) {
    this.baseHeight = value;
  }

  /**
   * Gets the value of the 'baseHash' field.
   * @return The value of the 'baseHash' field.
   */
  public com.eqchains.rpc.avro.BaseHash getBaseHash() {
    return baseHash;
  }

  /**
   * Sets the value of the 'baseHash' field.
   * @param value the value to set.
   */
  public void setBaseHash(com.eqchains.rpc.avro.BaseHash value) {
    this.baseHash = value;
  }

  /**
   * Gets the value of the 'currentTimestamp' field.
   * @return The value of the 'currentTimestamp' field.
   */
  public java.lang.Long getCurrentTimestamp() {
    return currentTimestamp;
  }

  /**
   * Sets the value of the 'currentTimestamp' field.
   * @param value the value to set.
   */
  public void setCurrentTimestamp(java.lang.Long value) {
    this.currentTimestamp = value;
  }

  /**
   * Creates a new MineringBase RecordBuilder.
   * @return A new MineringBase RecordBuilder
   */
  public static com.eqchains.rpc.avro.MineringBase.Builder newBuilder() {
    return new com.eqchains.rpc.avro.MineringBase.Builder();
  }

  /**
   * Creates a new MineringBase RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MineringBase RecordBuilder
   */
  public static com.eqchains.rpc.avro.MineringBase.Builder newBuilder(com.eqchains.rpc.avro.MineringBase.Builder other) {
    return new com.eqchains.rpc.avro.MineringBase.Builder(other);
  }

  /**
   * Creates a new MineringBase RecordBuilder by copying an existing MineringBase instance.
   * @param other The existing instance to copy.
   * @return A new MineringBase RecordBuilder
   */
  public static com.eqchains.rpc.avro.MineringBase.Builder newBuilder(com.eqchains.rpc.avro.MineringBase other) {
    return new com.eqchains.rpc.avro.MineringBase.Builder(other);
  }

  /**
   * RecordBuilder for MineringBase instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MineringBase>
    implements org.apache.avro.data.RecordBuilder<MineringBase> {

    private com.eqchains.rpc.avro.Cookie cookie;
    private com.eqchains.rpc.avro.Cookie.Builder cookieBuilder;
    private java.lang.CharSequence baseIp;
    private long baseHeight;
    private com.eqchains.rpc.avro.BaseHash baseHash;
    private long currentTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.eqchains.rpc.avro.MineringBase.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cookie)) {
        this.cookie = data().deepCopy(fields()[0].schema(), other.cookie);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCookieBuilder()) {
        this.cookieBuilder = com.eqchains.rpc.avro.Cookie.newBuilder(other.getCookieBuilder());
      }
      if (isValidValue(fields()[1], other.baseIp)) {
        this.baseIp = data().deepCopy(fields()[1].schema(), other.baseIp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.baseHeight)) {
        this.baseHeight = data().deepCopy(fields()[2].schema(), other.baseHeight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.baseHash)) {
        this.baseHash = data().deepCopy(fields()[3].schema(), other.baseHash);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currentTimestamp)) {
        this.currentTimestamp = data().deepCopy(fields()[4].schema(), other.currentTimestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MineringBase instance
     * @param other The existing instance to copy.
     */
    private Builder(com.eqchains.rpc.avro.MineringBase other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cookie)) {
        this.cookie = data().deepCopy(fields()[0].schema(), other.cookie);
        fieldSetFlags()[0] = true;
      }
      this.cookieBuilder = null;
      if (isValidValue(fields()[1], other.baseIp)) {
        this.baseIp = data().deepCopy(fields()[1].schema(), other.baseIp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.baseHeight)) {
        this.baseHeight = data().deepCopy(fields()[2].schema(), other.baseHeight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.baseHash)) {
        this.baseHash = data().deepCopy(fields()[3].schema(), other.baseHash);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currentTimestamp)) {
        this.currentTimestamp = data().deepCopy(fields()[4].schema(), other.currentTimestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'cookie' field.
      * @return The value.
      */
    public com.eqchains.rpc.avro.Cookie getCookie() {
      return cookie;
    }

    /**
      * Sets the value of the 'cookie' field.
      * @param value The value of 'cookie'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder setCookie(com.eqchains.rpc.avro.Cookie value) {
      validate(fields()[0], value);
      this.cookieBuilder = null;
      this.cookie = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cookie' field has been set.
      * @return True if the 'cookie' field has been set, false otherwise.
      */
    public boolean hasCookie() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'cookie' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.eqchains.rpc.avro.Cookie.Builder getCookieBuilder() {
      if (cookieBuilder == null) {
        if (hasCookie()) {
          setCookieBuilder(com.eqchains.rpc.avro.Cookie.newBuilder(cookie));
        } else {
          setCookieBuilder(com.eqchains.rpc.avro.Cookie.newBuilder());
        }
      }
      return cookieBuilder;
    }

    /**
     * Sets the Builder instance for the 'cookie' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.eqchains.rpc.avro.MineringBase.Builder setCookieBuilder(com.eqchains.rpc.avro.Cookie.Builder value) {
      clearCookie();
      cookieBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'cookie' field has an active Builder instance
     * @return True if the 'cookie' field has an active Builder instance
     */
    public boolean hasCookieBuilder() {
      return cookieBuilder != null;
    }

    /**
      * Clears the value of the 'cookie' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder clearCookie() {
      cookie = null;
      cookieBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseIp' field.
      * @return The value.
      */
    public java.lang.CharSequence getBaseIp() {
      return baseIp;
    }

    /**
      * Sets the value of the 'baseIp' field.
      * @param value The value of 'baseIp'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder setBaseIp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.baseIp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'baseIp' field has been set.
      * @return True if the 'baseIp' field has been set, false otherwise.
      */
    public boolean hasBaseIp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'baseIp' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder clearBaseIp() {
      baseIp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseHeight' field.
      * @return The value.
      */
    public java.lang.Long getBaseHeight() {
      return baseHeight;
    }

    /**
      * Sets the value of the 'baseHeight' field.
      * @param value The value of 'baseHeight'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder setBaseHeight(long value) {
      validate(fields()[2], value);
      this.baseHeight = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'baseHeight' field has been set.
      * @return True if the 'baseHeight' field has been set, false otherwise.
      */
    public boolean hasBaseHeight() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'baseHeight' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder clearBaseHeight() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseHash' field.
      * @return The value.
      */
    public com.eqchains.rpc.avro.BaseHash getBaseHash() {
      return baseHash;
    }

    /**
      * Sets the value of the 'baseHash' field.
      * @param value The value of 'baseHash'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder setBaseHash(com.eqchains.rpc.avro.BaseHash value) {
      validate(fields()[3], value);
      this.baseHash = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'baseHash' field has been set.
      * @return True if the 'baseHash' field has been set, false otherwise.
      */
    public boolean hasBaseHash() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'baseHash' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder clearBaseHash() {
      baseHash = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getCurrentTimestamp() {
      return currentTimestamp;
    }

    /**
      * Sets the value of the 'currentTimestamp' field.
      * @param value The value of 'currentTimestamp'.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder setCurrentTimestamp(long value) {
      validate(fields()[4], value);
      this.currentTimestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currentTimestamp' field has been set.
      * @return True if the 'currentTimestamp' field has been set, false otherwise.
      */
    public boolean hasCurrentTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currentTimestamp' field.
      * @return This builder.
      */
    public com.eqchains.rpc.avro.MineringBase.Builder clearCurrentTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MineringBase build() {
      try {
        MineringBase record = new MineringBase();
        if (cookieBuilder != null) {
          record.cookie = this.cookieBuilder.build();
        } else {
          record.cookie = fieldSetFlags()[0] ? this.cookie : (com.eqchains.rpc.avro.Cookie) defaultValue(fields()[0]);
        }
        record.baseIp = fieldSetFlags()[1] ? this.baseIp : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.baseHeight = fieldSetFlags()[2] ? this.baseHeight : (java.lang.Long) defaultValue(fields()[2]);
        record.baseHash = fieldSetFlags()[3] ? this.baseHash : (com.eqchains.rpc.avro.BaseHash) defaultValue(fields()[3]);
        record.currentTimestamp = fieldSetFlags()[4] ? this.currentTimestamp : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MineringBase>
    WRITER$ = (org.apache.avro.io.DatumWriter<MineringBase>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MineringBase>
    READER$ = (org.apache.avro.io.DatumReader<MineringBase>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
