/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.eqchains.persistence.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** EQC block's avro wrapper */
@org.apache.avro.specific.AvroGenerated
public class EQCBlockAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5002616507882590442L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EQCBlockAvro\",\"namespace\":\"com.eqzip.eqcoin.persistence.avro\",\"doc\":\"EQC block's avro wrapper\",\"fields\":[{\"name\":\"EQCHeader\",\"type\":\"bytes\"},{\"name\":\"Transactions\",\"type\":\"bytes\"},{\"name\":\"Signatures\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EQCBlockAvro> ENCODER =
      new BinaryMessageEncoder<EQCBlockAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EQCBlockAvro> DECODER =
      new BinaryMessageDecoder<EQCBlockAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EQCBlockAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EQCBlockAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EQCBlockAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EQCBlockAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EQCBlockAvro from a ByteBuffer. */
  public static EQCBlockAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.nio.ByteBuffer EQCHeader;
  @Deprecated public java.nio.ByteBuffer Transactions;
  @Deprecated public java.nio.ByteBuffer Signatures;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EQCBlockAvro() {}

  /**
   * All-args constructor.
   * @param EQCHeader The new value for EQCHeader
   * @param Transactions The new value for Transactions
   * @param Signatures The new value for Signatures
   */
  public EQCBlockAvro(java.nio.ByteBuffer EQCHeader, java.nio.ByteBuffer Transactions, java.nio.ByteBuffer Signatures) {
    this.EQCHeader = EQCHeader;
    this.Transactions = Transactions;
    this.Signatures = Signatures;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EQCHeader;
    case 1: return Transactions;
    case 2: return Signatures;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EQCHeader = (java.nio.ByteBuffer)value$; break;
    case 1: Transactions = (java.nio.ByteBuffer)value$; break;
    case 2: Signatures = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'EQCHeader' field.
   * @return The value of the 'EQCHeader' field.
   */
  public java.nio.ByteBuffer getEQCHeader() {
    return EQCHeader;
  }

  /**
   * Sets the value of the 'EQCHeader' field.
   * @param value the value to set.
   */
  public void setEQCHeader(java.nio.ByteBuffer value) {
    this.EQCHeader = value;
  }

  /**
   * Gets the value of the 'Transactions' field.
   * @return The value of the 'Transactions' field.
   */
  public java.nio.ByteBuffer getTransactions() {
    return Transactions;
  }

  /**
   * Sets the value of the 'Transactions' field.
   * @param value the value to set.
   */
  public void setTransactions(java.nio.ByteBuffer value) {
    this.Transactions = value;
  }

  /**
   * Gets the value of the 'Signatures' field.
   * @return The value of the 'Signatures' field.
   */
  public java.nio.ByteBuffer getSignatures() {
    return Signatures;
  }

  /**
   * Sets the value of the 'Signatures' field.
   * @param value the value to set.
   */
  public void setSignatures(java.nio.ByteBuffer value) {
    this.Signatures = value;
  }

  /**
   * Creates a new EQCBlockAvro RecordBuilder.
   * @return A new EQCBlockAvro RecordBuilder
   */
  public static com.eqchains.persistence.avro.EQCBlockAvro.Builder newBuilder() {
    return new com.eqchains.persistence.avro.EQCBlockAvro.Builder();
  }

  /**
   * Creates a new EQCBlockAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EQCBlockAvro RecordBuilder
   */
  public static com.eqchains.persistence.avro.EQCBlockAvro.Builder newBuilder(com.eqchains.persistence.avro.EQCBlockAvro.Builder other) {
    return new com.eqchains.persistence.avro.EQCBlockAvro.Builder(other);
  }

  /**
   * Creates a new EQCBlockAvro RecordBuilder by copying an existing EQCBlockAvro instance.
   * @param other The existing instance to copy.
   * @return A new EQCBlockAvro RecordBuilder
   */
  public static com.eqchains.persistence.avro.EQCBlockAvro.Builder newBuilder(com.eqchains.persistence.avro.EQCBlockAvro other) {
    return new com.eqchains.persistence.avro.EQCBlockAvro.Builder(other);
  }

  /**
   * RecordBuilder for EQCBlockAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EQCBlockAvro>
    implements org.apache.avro.data.RecordBuilder<EQCBlockAvro> {

    private java.nio.ByteBuffer EQCHeader;
    private java.nio.ByteBuffer Transactions;
    private java.nio.ByteBuffer Signatures;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.eqchains.persistence.avro.EQCBlockAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EQCHeader)) {
        this.EQCHeader = data().deepCopy(fields()[0].schema(), other.EQCHeader);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Transactions)) {
        this.Transactions = data().deepCopy(fields()[1].schema(), other.Transactions);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Signatures)) {
        this.Signatures = data().deepCopy(fields()[2].schema(), other.Signatures);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EQCBlockAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.eqchains.persistence.avro.EQCBlockAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.EQCHeader)) {
        this.EQCHeader = data().deepCopy(fields()[0].schema(), other.EQCHeader);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Transactions)) {
        this.Transactions = data().deepCopy(fields()[1].schema(), other.Transactions);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Signatures)) {
        this.Signatures = data().deepCopy(fields()[2].schema(), other.Signatures);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'EQCHeader' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getEQCHeader() {
      return EQCHeader;
    }

    /**
      * Sets the value of the 'EQCHeader' field.
      * @param value The value of 'EQCHeader'.
      * @return This builder.
      */
    public com.eqchains.persistence.avro.EQCBlockAvro.Builder setEQCHeader(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.EQCHeader = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EQCHeader' field has been set.
      * @return True if the 'EQCHeader' field has been set, false otherwise.
      */
    public boolean hasEQCHeader() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'EQCHeader' field.
      * @return This builder.
      */
    public com.eqchains.persistence.avro.EQCBlockAvro.Builder clearEQCHeader() {
      EQCHeader = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Transactions' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTransactions() {
      return Transactions;
    }

    /**
      * Sets the value of the 'Transactions' field.
      * @param value The value of 'Transactions'.
      * @return This builder.
      */
    public com.eqchains.persistence.avro.EQCBlockAvro.Builder setTransactions(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.Transactions = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Transactions' field has been set.
      * @return True if the 'Transactions' field has been set, false otherwise.
      */
    public boolean hasTransactions() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Transactions' field.
      * @return This builder.
      */
    public com.eqchains.persistence.avro.EQCBlockAvro.Builder clearTransactions() {
      Transactions = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Signatures' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getSignatures() {
      return Signatures;
    }

    /**
      * Sets the value of the 'Signatures' field.
      * @param value The value of 'Signatures'.
      * @return This builder.
      */
    public com.eqchains.persistence.avro.EQCBlockAvro.Builder setSignatures(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.Signatures = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Signatures' field has been set.
      * @return True if the 'Signatures' field has been set, false otherwise.
      */
    public boolean hasSignatures() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Signatures' field.
      * @return This builder.
      */
    public com.eqchains.persistence.avro.EQCBlockAvro.Builder clearSignatures() {
      Signatures = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EQCBlockAvro build() {
      try {
        EQCBlockAvro record = new EQCBlockAvro();
        record.EQCHeader = fieldSetFlags()[0] ? this.EQCHeader : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.Transactions = fieldSetFlags()[1] ? this.Transactions : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.Signatures = fieldSetFlags()[2] ? this.Signatures : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EQCBlockAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<EQCBlockAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EQCBlockAvro>
    READER$ = (org.apache.avro.io.DatumReader<EQCBlockAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
